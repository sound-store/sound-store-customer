@page
@model SoundStore.Web.Pages.ProductDetailModel
@{
    ViewData["Title"] = "Details";
}
<!-- Code for product detail page -->

<div class="container" style="padding-top: calc(72px + 2rem);">
    <!-- Product Detail Section -->
    <div class="row mb-5">
        <!-- Left: Product Images -->
        <div class="col-md-6 mb-4">
            <img src="@Model.Product.Images.FirstOrDefault()?.ImageUrl" 
                 class="img-fluid rounded w-100 mb-3" 
                 alt="Main Product Image">

            <div class="d-flex gap-2">
                @foreach (var img in Model.Product.Images.Take(4))
                {
                    <img src="@img.ImageUrl" class="img-thumbnail" style="width: 80px; height: 80px;" />
                }
            </div>
        </div>

        <!-- Right: Product Info -->
        <div class="col-md-6">
            <h2>@Model.Product.Name</h2>
            <p class="text-muted">@Model.Product.Description</p>

            <div class="mb-2">
                @{
                    var rating = Model.Product.OverallRatingScore.HasValue
                    ? (int)Math.Round(Model.Product.OverallRatingScore.Value)
                    : 0;
                }
                <span class="text-warning">
                    @for (int i = 1; i <= 5; i++)
                    {
                        @Html.Raw(i <= rating ? "★" : "☆")
                    }
                </span>
                <span class="text-muted">(@Model.Product.RatingResponses.Count reviews)</span>
            </div>

            <h4 class="fw-bold">
                @string.Format(new System.Globalization.CultureInfo("vi-VN"), "{0:N0}₫", Model.Product.Price)
            </h4>
            
            @* 
                <p class="text-success">
                    @(Model.Product.StockQuantity > 0 ? "In stock – ships in 24h" : "Out of stock")
                </p>
            *@

            <p class="text-muted">
                @Model.Product.SpecialFeatures
            </p>

            <ul class="list-unstyled mb-4">
                @if (!string.IsNullOrEmpty(Model.Product.Type))
                {
                    <li>✔ Type: @Model.Product.Type</li>
                }
                @if (!string.IsNullOrEmpty(Model.Product.Connectivity))
                {
                    <li>✔ Connectivity: @Model.Product.Connectivity</li>
                }
                @if (!string.IsNullOrEmpty(Model.Product.BatteryLife))
                {
                    <li>✔ Battery Life: @Model.Product.BatteryLife</li>
                }
                @if (!string.IsNullOrEmpty(Model.Product.Warranty))
                {
                    <li>✔ Warranty: @Model.Product.Warranty</li>
                }
            </ul>

            @* Cart and wishlist *@
            <form class="d-flex gap-2 mb-3">
                <input type="number" class="form-control w-25" value="1" min="1" max="@Model.Product.StockQuantity" />
                <button class="btn btn-danger" type="button">Add to Cart</button>
                <button class="btn btn-outline-secondary" type="button">♡ Wishlist</button>
            </form>

            <p><strong>Category:</strong> @Model.Product.CategoryName</p>
            <p><strong>Subcategory:</strong> @Model.Product.SubCategoryName</p>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="border-top pt-5">
        <h3 class="mb-4">Customer Reviews</h3>

        <div class="row mb-4">
            <div class="col-md-3 text-center">
                <h1 class="display-4 fw-bold">
                    @(Model.Product.OverallRatingScore.HasValue
                        ? Model.Product.OverallRatingScore.Value.ToString("0.0")
                        : "0.0")
                </h1>
                <div class="text-warning fs-4">
                    @{
                        var avgRating = Model.Product.OverallRatingScore.HasValue
                        ? (int)Math.Round(Model.Product.OverallRatingScore.Value)
                        : 0;
                        for (int i = 1; i <= 5; i++)
                        {
                            @Html.Raw(i <= avgRating ? "★" : "☆")
                        }
                    }
                </div>
                <p class="text-muted">Based on @Model.Product.RatingResponses.Count reviews</p>
            </div>

            <div class="col-md-9">
                @{
                    var ratingsGrouped = Model.Product.RatingResponses
                    .GroupBy(r => r.RatingPoint)
                    .OrderByDescending(g => g.Key)
                    .ToDictionary(g => g.Key, g => g.Count());

                    int total = Model.Product.RatingResponses.Count;
                }

                @for (int i = 5; i >= 1; i--)
                {
                    int count = ratingsGrouped.ContainsKey(i) ? ratingsGrouped[i] : 0;
                    int percent = total > 0 ? (int)((count / (double)total) * 100) : 0;

                    <div class="d-flex align-items-center mb-2">
                        <span class="me-2">@i★</span>
                        <div class="progress flex-grow-1 me-2" style="height: 8px;">
                            <div class="progress-bar bg-warning" style="width: @(percent + "%")"></div>
                        </div>
                        <small>@percent%</small>
                    </div>
                }
            </div>
        </div>

        <div class="d-flex flex-column gap-4">
            @foreach (var review in Model.Product.RatingResponses)
            {
                <div class="border rounded p-3">
                    <div class="d-flex justify-content-between">
                        <strong>@review.Username</strong>
                        <div class="text-warning">
                            @for (int i = 1; i <= 5; i++)
                            {
                                @Html.Raw(i <= review.RatingPoint ? "★" : "☆")
                            }
                        </div>
                    </div>
                    @* <div class="text-muted">@review.CreatedAt.ToString("MMMM dd, yyyy")</div> *@
                    <p class="mt-2">@review.Comment</p>
                </div>
            }
        </div>
    </div>
</div>



